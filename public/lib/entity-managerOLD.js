!function(t,n){"object"==typeof exports&&"undefined"!=typeof module?module.exports=n():"function"==typeof define&&define.amd?define(n):t.ensy=n()}(this,function(){"use strict";function t(n){if(null==n||"object"!=(void 0===n?"undefined":e(n)))return n;var o=void 0;if(n instanceof Date)return o=new Date,o.setTime(n.getTime()),o;if(n instanceof Array){o=[];for(var i=0,r=n.length;i<r;i++)o[i]=t(n[i]);return o}if(n instanceof Object){o={};for(var s in n)n.hasOwnProperty(s)&&(o[s]=t(n[s]));return o}}function n(t){return t&&"[object Function]"==={}.toString.call(t)}var e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},o=function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")},i=function(){function t(t,n){for(var e=0;e<n.length;e++){var o=n[e];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}return function(n,e,o){return e&&t(n.prototype,e),o&&t(n,o),n}}();return function(){function e(t){o(this,e),this.listener=null,t&&n(t.emit)&&(this.listener=t),this.entities=[],this.components={},this.assemblages={},this.entityComponentData={},this.processors=[],this.uid=0}return i(e,[{key:"getUid",value:function(){return this.uid++}},{key:"createEntity",value:function(t,n){return void 0===n||null===n?n=this.getUid():n>this.uid&&(this.uid=n),this.addComponentsToEntity(t,n),this.entities.includes(n)||this.entities.push(n),this.listener&&this.listener.emit("entityCreated",n),n}},{key:"removeEntity",value:function(t){for(var n in this.entityComponentData)this.entityComponentData.hasOwnProperty(n)&&this.entityComponentData[n][t]&&delete this.entityComponentData[n][t];return this.entities.splice(this.entities.indexOf(t),1),this.listener&&this.listener.emit("entityCreated",t),this}},{key:"addComponent",value:function(t,n){return this.components[t]=n,this}},{key:"removeComponent",value:function(t){return delete this.components[t],delete this.entityComponentData[t],this}},{key:"getComponentsList",value:function(){return Object.keys(this.components)}},{key:"addComponentsToEntity",value:function(n,e){var o=this,i=this;return n.forEach(function(t){if(!o.components[t])throw new Error("Trying to use unknown component: "+t)}),n.forEach(function(n){o.entityComponentData[n]||(o.entityComponentData[n]={});var r=null;o.listener?(r={},function(n,o){var r=t(i.components[o].state);for(var s in r)r.hasOwnProperty(s)&&function(t){Object.defineProperty(n,t,{enumerable:!0,get:function(){return r[t]},set:function(n){r[t]=n,i.listener.emit("entityComponentUpdated",e,o)}})}(s)}(r,n)):r=t(i.components[n].state),r.__id=e,o.entityComponentData[n][e]=r,o.listener&&o.listener.emit("entityComponentAdded",e,n)}),this}},{key:"removeComponentsFromEntity",value:function(t,n){var e=this;return t.forEach(function(t){if(!e.components[t])throw new Error("Trying to use unknown component: "+t)}),t.forEach(function(t){e.entityComponentData[t]&&e.entityComponentData[t][n]&&(delete e.entityComponentData[t][n],e.listener&&e.listener.emit("entityComponentRemoved",n,t))}),this}},{key:"getComponentDataForEntity",value:function(t,n){if(!(t in this.components))throw new Error("Trying to use unknown component: "+t);if(!this.entityComponentData.hasOwnProperty(t)||!this.entityComponentData[t].hasOwnProperty(n))throw new Error("No data for component "+t+" and entity "+n);return this.entityComponentData[t][n]}},{key:"updateComponentDataForEntity",value:function(t,n,e){var o=this.getComponentDataForEntity(t,n);for(var i in e)e.hasOwnProperty(i)&&o.hasOwnProperty(i)&&(o[i]=e[i]);return this}},{key:"getComponentsData",value:function(t){if(!(t in this.components))throw new Error("Trying to use unknown component: "+t);return this.entityComponentData.hasOwnProperty(t)?this.entityComponentData[t]:[]}},{key:"entityHasComponent",value:function(t,n){return n in this.components&&(this.entityComponentData.hasOwnProperty(n)&&this.entityComponentData[n].hasOwnProperty(t))}},{key:"addAssemblage",value:function(t,n){return this.assemblages[t]=n,this}},{key:"removeAssemblage",value:function(t){return delete this.assemblages[t],this}},{key:"createEntityFromAssemblage",value:function(t){if(!(t in this.assemblages))throw new Error("Trying to use unknown assemblage: "+t);var n=this.assemblages[t],e=this.createEntity(n.components);for(var o in n.initialState)if(n.initialState.hasOwnProperty(o)){var i=n.initialState[o];this.updateComponentDataForEntity(o,e,i)}return e}},{key:"addProcessor",value:function(t){return this.processors.push(t),this}},{key:"removeProcessor",value:function(t){return this.processors.splice(this.processors.indexOf(t),1),this}},{key:"update",value:function(t){return this.processors.forEach(function(n){return n.update(t)}),this}}]),e}()});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
